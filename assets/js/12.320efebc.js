(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{208:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),a("p",[t._v("Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞。")]),t._m(1),a("p",[t._v("我司项目中通常使用 "),a("a",{attrs:{href:"https://swagger.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("swagger"),a("OutboundLink")],1),t._v(" 由后端来模拟数据。\n"),a("strong",[t._v("swagger")]),t._v(" 是一个 REST APIs 文档生成工具，可以跨平台从代码注释中自动生成，开源，支持大部分语言，社区好，总之非常不错，强烈推荐。\n"),a("a",{attrs:{href:"http://petstore.swagger.io/?_ga=2.222649619.983598878.1509960455-2044209180.1509960455#/pet/addPet",target:"_blank",rel:"noopener noreferrer"}},[t._v("线上demo"),a("OutboundLink")],1)]),t._m(2),a("p",[a("a",{attrs:{href:"https://github.com/PanJiaChen/vueAdmin-template",target:"_blank",rel:"noopener noreferrer"}},[t._v("vueAdmin-template"),a("OutboundLink")],1),t._v(" 使用的是 "),a("a",{attrs:{href:"https://easy-mock.com/login",target:"_blank",rel:"noopener noreferrer"}},[t._v("easy-mock"),a("OutboundLink")],1),t._v(" 来模拟数据。\n它是一个纯前端可视化，并且能快速生成模拟数据的持久化服务。非常的简单易用还能结合 "),a("code",[t._v("swagger")]),t._v("，支持跨域 ，不管团队还是个人项目都值得一试。")]),t._m(3),a("p",[a("a",{attrs:{href:"https://github.com/PanJiaChen/vue-element-admin",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-element-admin"),a("OutboundLink")],1),t._v(" 由于是一个纯前端个人项目，所有的数据都是用 "),a("a",{attrs:{href:"https://github.com/nuysoft/Mock",target:"_blank",rel:"noopener noreferrer"}},[t._v("mockjs"),a("OutboundLink")],1),t._v(" 本地生成模拟出来的，它的原理是:拦截了所有的请求并代理到本地模拟数据，所以 network 中没有发出任何的请求。")]),a("p",[t._v("如需改造本项目，去除mockjs也很简单。")]),t._m(4),t._m(5),t._m(6),a("p",[t._v("有很多时候我们会遇到本地使用 mock 数据，线上环境使用真实数据。")]),t._m(7),a("p",[t._v("你需要保证你本地模拟 api 除了根路径其它的地址是一致的。\n比如：")]),t._m(8),a("p",[t._v("我们可以通过之后会介绍的"),a("router-link",{attrs:{to:"/zh/guide/essentials/deploy.html#环境变量"}},[t._v("环境变量")]),t._v("来做到不同环境下，请求不同的api地址。")],1),t._m(9),t._m(10),a("p",[t._v("之后根据环境变量创建"),a("code",[t._v("axios")]),t._v("实例，让它具有不同的"),a("code",[t._v("baseURL")]),t._v("。 "),a("a",{attrs:{href:"https://github.com/PanJiaChen/vue-element-admin/blob/master/src/utils/request.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("@/utils/request.js"),a("OutboundLink")],1)]),t._m(11),a("p",[t._v("这样我们就做到了自动根据环境变量切换本地和线上api。")]),t._m(12),t._m(13),t._m(14),a("p",[t._v("只有在本地环境之中才会引入mock数据。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"mock-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mock-data","aria-hidden":"true"}},[this._v("#")]),this._v(" Mock Data")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"swagger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swagger","aria-hidden":"true"}},[this._v("#")]),this._v(" Swagger")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"easy-mock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#easy-mock","aria-hidden":"true"}},[this._v("#")]),this._v(" Easy-Mock")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"mockjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mockjs","aria-hidden":"true"}},[this._v("#")]),this._v(" Mockjs")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所有的mock数据都在 "),s("code",[this._v("@/src/mock")]),this._v(" 目录下，它只会拦截 "),s("code",[this._v("@/src/mock/index.js")]),this._v(" 文件中拦截的 url。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("strong",[t._v("移除")]),t._v("只需要在 "),a("code",[t._v("@/src/main.js")]),t._v(" 中移除 "),a("code",[t._v("import './mock'")]),t._v(" 并且删除 "),a("code",[t._v("@/src/mock")]),t._v(" 文件夹即可。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"本地mock与线上切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地mock与线上切换","aria-hidden":"true"}},[this._v("#")]),this._v(" 本地Mock与线上切换")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("Easy-Mock的形式")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("https://api-dev/login   // 本地请求\n\nhttps://api-prod/login  // 线上请求\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("//dev.env.js")]),t._v("\nmodule"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("BASE_API")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"https://api-dev\"'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//注入本地api的根路径")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("//prod.env.js")]),t._v("\nmodule"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("BASE_API")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"https://api-prod\"'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//注入线上api的根路径")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// create an axios instance")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" service "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" axios"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  baseURL"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("BASE_API")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// api的base_url")]),t._v("\n  timeout"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5000")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// request timeout")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("Mock.js 的切换")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当我们本地使用 "),s("code",[this._v("Mock.js")]),this._v(" 模拟本地数据，线上使用真实环境api方法。这与上面的easy-mock的方法是差不多的。我们主要是判断：是线上环境的时候，不引入mock数据就可以了，只有在本地引入 "),s("code",[this._v("Mock.js")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("//main.js")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'development'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("require")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'./mock'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// simulation data")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);s.default=e.exports}}]);